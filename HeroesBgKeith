--- Dummy Hub ---

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Dummy Hub", "Sentinel")
local Tab = Window:NewTab("Weakest Dummy")
local Section = Tab:NewSection("Weakest Dummy Moves")
Section:NewButton("Dummy Counter (Dummy)", "Weakest Dummy's rare counter move.", function()
local player = game.Players.LocalPlayer
repeat wait() until player.Character.Humanoid
local humanoid = player.Character.Humanoid
local character = player.Character or player.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")

local anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://18440406788"

local playAnim = humanoid:LoadAnimation(anim)
playAnim:Play()
end)
Section:NewButton("Dummy Counter (Victim) (kills you at end)", "Weakest Dummy's rare counter move. (Victim)", function()
local player = game.Players.LocalPlayer
repeat wait() until player.Character.Humanoid
local humanoid = player.Character.Humanoid
local character = player.Character or player.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")

local anim = Instance.new("Animation")
anim.AnimationId = "rbxassetid://18440398084"

local playAnim = humanoid:LoadAnimation(anim)
playAnim:Play()
wait(8)
humanoid.Health = 0
end)
Section:NewButton("Dummy Counter (Dummy + Victim)", "Weakest Dummy's rare counter move. (Dummy + Victim)", function()
local player = game.Players.LocalPlayer
repeat wait() until player.Character.Humanoid
local humanoid = player.Character.Humanoid
local character = player.Character or player.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")
local mainAnimationId = "rbxassetid://18440398084"
local pushBackAnimationId = "rbxassetid://18440406788"

local minDamage = 0
local maxDamage = 0
local pushBackDistance = 0

-- Function to play an animation
local function playAnimation(animationId, humanoid)
    local animation = Instance.new("Animation")
    animation.AnimationId = animationId
    local animationTrack = humanoid:LoadAnimation(animation)
    animationTrack:Play()
    return animationTrack
end

-- Function to play the push-back animation
local function playPushBackAnimation(humanoid)
    local pushBackAnimation = Instance.new("Animation")
    pushBackAnimation.AnimationId = pushBackAnimationId
    local pushBackAnimationTrack = humanoid:LoadAnimation(pushBackAnimation)
    pushBackAnimationTrack:Play()
end

local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Check if there is a player in front
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local lookDirection = humanoidRootPart.CFrame.LookVector
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local raycastResult = workspace:Raycast(humanoidRootPart.Position, lookDirection * 20, raycastParams)
    
    if raycastResult and raycastResult.Instance and raycastResult.Instance.Parent:FindFirstChild("Humanoid") then
        -- There is a player in front, play main animation
        local hitCharacter = raycastResult.Instance.Parent
        local hitHumanoidRootPart = hitCharacter:FindFirstChild("HumanoidRootPart")
        local hitHumanoid = hitCharacter:FindFirstChild("Humanoid")
        
        if hitHumanoidRootPart and hitHumanoid then
            -- Play the main animation immediately
            wait(0.5)
            local mainAnimationTrack = playAnimation(mainAnimationId, humanoid)
            
            -- Apply damage and push back after the delay
            local damage = math.random(minDamage, maxDamage)
            hitHumanoid:TakeDamage(damage)
            local pushBackDirection = (hitHumanoidRootPart.Position - humanoidRootPart.Position).unit
            local pushBackForce = pushBackDirection * pushBackDistance
            hitHumanoidRootPart.Velocity = pushBackForce
            playPushBackAnimation(hitHumanoid)  -- Play push-back animation
            print("Dealt " .. damage .. " damage, pushed back player, and played push-back animation on player: " .. hitCharacter.Name)
        end
    else
        -- No player found in front, just play main animation
        print("No player found in front.")
        wait(0.5)
        playAnimation(mainAnimationId, humanoid)
    end
wait(8)
humanoid.Health = 0
end)
Section:NewButton("Dummy Counter Opposite (Dummy + Victim)", "Weakest Dummy's rare counter move. (Dummy + Victim)", function()
local player = game.Players.LocalPlayer
repeat wait() until player.Character.Humanoid
local humanoid = player.Character.Humanoid
local character = player.Character or player.CharacterAdded:Wait()
local UserInputService = game:GetService("UserInputService")
local mainAnimationId = "rbxassetid://18440406788"
local pushBackAnimationId = "rbxassetid://18440398084"

local minDamage = 0
local maxDamage = 0
local pushBackDistance = 0

-- Function to play an animation
local function playAnimation(animationId, humanoid)
    local animation = Instance.new("Animation")
    animation.AnimationId = animationId
    local animationTrack = humanoid:LoadAnimation(animation)
    animationTrack:Play()
    return animationTrack
end

-- Function to play the push-back animation
local function playPushBackAnimation(humanoid)
    local pushBackAnimation = Instance.new("Animation")
    pushBackAnimation.AnimationId = pushBackAnimationId
    local pushBackAnimationTrack = humanoid:LoadAnimation(pushBackAnimation)
    pushBackAnimationTrack:Play()
end

local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Check if there is a player in front
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    local lookDirection = humanoidRootPart.CFrame.LookVector
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local raycastResult = workspace:Raycast(humanoidRootPart.Position, lookDirection * 20, raycastParams)
    
    if raycastResult and raycastResult.Instance and raycastResult.Instance.Parent:FindFirstChild("Humanoid") then
        -- There is a player in front, play main animation
        local hitCharacter = raycastResult.Instance.Parent
        local hitHumanoidRootPart = hitCharacter:FindFirstChild("HumanoidRootPart")
        local hitHumanoid = hitCharacter:FindFirstChild("Humanoid")
        
        if hitHumanoidRootPart and hitHumanoid then
            -- Play the main animation immediately
            wait(0.5)
            local mainAnimationTrack = playAnimation(mainAnimationId, humanoid)
            
            -- Apply damage and push back after the delay
            local damage = math.random(minDamage, maxDamage)
            hitHumanoid:TakeDamage(damage)
            local pushBackDirection = (hitHumanoidRootPart.Position - humanoidRootPart.Position).unit
            local pushBackForce = pushBackDirection * pushBackDistance
            hitHumanoidRootPart.Velocity = pushBackForce
            playPushBackAnimation(hitHumanoid)  -- Play push-back animation
            print("Dealt " .. damage .. " damage, pushed back player, and played push-back animation on player: " .. hitCharacter.Name)
        end
    else
        -- No player found in front, just play main animation
        print("No player found in front.")
        wait(0.5)
        playAnimation(mainAnimationId, humanoid)
    end
end)
local Tab = Window:NewTab("Info")
local Section = Tab:NewSection("Information")
Section:NewButton("Script made by me, a.k.a NetlessKJ. (ryanas.)", "i made this lololol", function()
end)
